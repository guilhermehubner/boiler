type Query {
	viewer: User
	users(limit: Int = 100): [User]!
	user(userID: ID!): User!
}

type Mutation {
	addEmail(input: addEmailInput!): EmailResponse!
	addUser(input: addUserInput!): UserResponse!
	authUser(input: authUserInput!): AuthUserResponse!
}

# type
type User {
	id: ID!
	name: String!
	emails: [Email]!
}

type Email {
	id: ID!
	address: String!
	user: User!
}

# input
input addEmailInput {
	userID: ID!
	address: String!
}

input addUserInput {
	name: String!
	password: String!
}

input authUserInput {
	email: String!
	password: String!
}

# response
type UserResponse {
	user: User!
}

type AuthUserResponse {
	token: String!
	user: User!
}

type EmailResponse {
	email: Email!
}
